#!/usr/bin/env python

import gtk, gobject, re
from cb_itemtypes import *
from cbmenu import *
from cbutil import TabButton
from lxml import etree
from xdg import BaseDirectory
import os,re
import ConfigParser

try:
    import dbus
except ImportError:
    dbus = None

class CBEditor(gtk.Window):
	def __init__(self):
			gtk.Window.__init__(self)
			self.set_title("Compiz Boxmenu Editor")
			self.props.icon_name='cb-menu'
			#self.connect("delete-event", self.quit)
			self.set_border_width(5)
			self.set_size_request(600, 400)
			self.vbox=gtk.VBox(False, 2)
			self.connect('destroy', gtk.main_quit)
			hbox_main=gtk.HBox(False, 2)

			toolbar=gtk.Toolbar()
			
			new_button = gtk.MenuToolButton(gtk.STOCK_NEW)
			new_button.set_menu(self.make_new_menu())

			edit_button = gtk.ToolButton(gtk.STOCK_EDIT)

			save_button = gtk.MenuToolButton(gtk.STOCK_SAVE)
			#save_button.set_menu(self.make_save_menu())
			save_button.connect('clicked', self.save_one)

			generate_button = gtk.ToolButton(gtk.STOCK_CONVERT)

			delete_button = gtk.MenuToolButton(gtk.STOCK_DELETE)
			delete_button.set_menu(self.make_delete_menu())
			delete_button.connect('clicked', self.delete_item)

			#undo_button = gtk.ToolButton(gtk.STOCK_UNDO)
			#redo_button = gtk.ToolButton(gtk.STOCK_REDO)
			reload_button = gtk.ToolButton(gtk.STOCK_REFRESH)
			settings_button = gtk.ToolButton(gtk.STOCK_PREFERENCES)
			about_button = gtk.ToolButton(gtk.STOCK_ABOUT)
			sep=gtk.SeparatorToolItem()
			sep2=gtk.SeparatorToolItem()
			sep.set_draw(False)
			sep.set_expand(True)
			sep2.set_draw(False)
			sep2.set_expand(True)
			toolbar.insert(new_button, 0)
			toolbar.insert(edit_button, 1)
			toolbar.insert(save_button, 2)
			toolbar.insert(generate_button, 3)
			toolbar.insert(delete_button, 4)
			toolbar.insert(sep, 5)
			#toolbar.insert(undo_button, 6)
			#toolbar.insert(redo_button, 7)
			toolbar.insert(sep2, 6)
			toolbar.insert(reload_button, 7)
			toolbar.insert(settings_button, 8)
			toolbar.insert(about_button, 9)

			self.vbox.add(toolbar)
			
			listview=gtk.TreeView()
			self.list_menus()
			listview.set_model(self.menu_list)
			listview.connect('row-activated',self.open_menu_file)
			scrolled=gtk.ScrolledWindow()
			scrolled.add(listview)
			hbox_main.add(scrolled)
			
			name = gtk.TreeViewColumn('Menu')
			listview.append_column(name)
			cell = gtk.CellRendererToggle()
			cell.set_activatable(True)
			name.pack_start(cell)
			cell = gtk.CellRendererText()
			name.pack_start(cell)
			name.add_attribute(cell,"text", 0)
			
			self.tabs=gtk.Notebook()
			self.tabs.set_size_request(340,240)
			self.tabs.set_scrollable(True)
			self.tabs.connect('switch-page', self.get_current_menu)
			hbox_main.add(self.tabs)
			self.tabs.set_show_tabs(True)
			self.tabs.set_tab_pos(gtk.POS_TOP)
			
			#self.tabs.append_page(child, tab_label=None) #signal for open or new

			self.hbox_item=gtk.HBox(False, 2)

			self.vbox.add(hbox_main)
			self.vbox.add(self.hbox_item)
			self.add(self.vbox)
			self.show_all()

	def make_new_menu(self):
		new_menu=gtk.Menu()
		elementlist = ['Launcher', 'Menu', 'Separator', 'Windows List',
		'Viewports List', 'Recent Documents', 'Reload', 'Menu File']
		for i in elementlist:
			new_item = gtk.ImageMenuItem(i, gtk.STOCK_NEW)
			new_item.connect('activate', self.make_new_item, i)
			new_menu.append(new_item)
		new_menu.show_all()
		return new_menu

	def make_delete_menu(self):
		delete_menu=gtk.Menu()
		
		delete_item=gtk.ImageMenuItem("Current Item")
		delete_item.connect('activate', self.delete_item)
		delete_menu.append(delete_item)
		
		delete_item=gtk.ImageMenuItem("Current Menu")
		delete_item.connect('activate', self.delete_menu)
		delete_menu.append(delete_item)
		
		delete_menu.show_all()
		return delete_menu

	def delete_menu(self, widget):
		print "TODO"

	def delete_item(self, widget):
		idx=self.tabs.get_current_page()
		menu=self.tabs.get_nth_page(idx)
		menu.on_delete_clicked(self, widget)

	def make_new_item(self, widget, element_type):
		if element_type != 'Menu File':
			idx=self.tabs.get_current_page()
			widget=self.tabs.get_nth_page(idx)
			model=widget.treeview.get_model()
			m, r = widget.treeview.get_selection().get_selected()
			parent = sibling = None
			if r:
				current = model[r][0]
				if current.node.tag == 'menu':
					parent = r
				else:
					parent = model[r].parent
					if parent is not None:
						parent = parent.iter
					sibling = r
			if parent:
				parentelement = model[parent][0]
			else:
				parentelement = widget.menu

			element = elementsbyname[element_type]()
			if sibling:
				position = parentelement.node.index(current.node) + 1
				parentelement.node.insert(position, element.node)
				model.insert_after(parent, sibling, row=(element,))
			else:
				model.append(parent, row=(element,))
				parentelement.node.append(element.node)
		else:
			print "I am a pickle"
		print "New %s created" % element_type

	def save_one(self, widget):
		idx=self.tabs.get_current_page()
		#ignore if tab isn't flagged 
		#or if undo stack and redo stoack is empty
		widget=self.tabs.get_nth_page(idx)
		widget.write_menu()
		label=self.tabs.get_tab_label(widget)
		current_text=label.label.get_text()
		label.label.set_text(current_text.replace("*",""))
	
	def save_all(self, widget):
		for i in xrange(self.tabs.get_n_pages()):
			widget=self.tabs.get_nth_page(i)
			widget.write_menu()
			label=self.tabs.get_tab_label(widget)
			current_text=label.label.get_text()
			label.label.set_text(current_text.replace("*",""))

	def get_current_menu(self, notebook, page, page_num):
		for i in xrange(self.tabs.get_n_pages()):
			widget=self.tabs.get_nth_page(i)
			if hasattr(widget, 'currently_editing'):
				if i != page_num:
					widget.currently_editing.hide()
				else:
					widget.currently_editing.show()

	def change_tab_title_del(self, path, a, label):
		label.set_text("*"+label.get_text())

	def change_tab_title(self, path, iter, a, label):
		label.set_text("*"+label.get_text())

	def get_edit_panel(self, treeview, path, view_column, menufile):
		self.vbox.add(menufile.currently_editing)
		page_num=self.tabs.get_current_page()
		for i in xrange(self.tabs.get_n_pages()):
			widget=self.tabs.get_nth_page(i)
			if hasattr(widget, 'currently_editing'):
				if i != page_num:
					widget.currently_editing.hide()
				else:
					widget.currently_editing.show()

	def open_menu_file(self,treeview, path, view_column):
		menufile=MenuFile(self.menu_list[path[0]][1])
		
		hbox=TabButton(self.menu_list[path[0]][0])
		hbox.btn.connect('clicked', self.on_closetab_button_clicked, hbox.label)
		
		self.tabs.append_page(menufile, hbox)
		menufile.model.connect('row-changed',self.change_tab_title, hbox.label)
		menufile.model.connect('row-deleted',self.change_tab_title_del, hbox.label)
		menufile.model.connect('row-inserted',self.change_tab_title, hbox.label)
		menufile.treeview.connect('row-activated',self.get_edit_panel, menufile)
	
	def on_closetab_button_clicked(self, sender, widget):
		pagenum = self.tabs.page_num(widget)
		#if code for tab title
		
		self.tabs.remove_page(pagenum)

	def list_menus(self):
		self.menu_list=gtk.ListStore(gobject.TYPE_STRING, gobject.TYPE_STRING)
		menu_path=BaseDirectory.xdg_config_home + "/compiz/boxmenu"
		for checking in os.listdir(menu_path):
			path="%s/%s" %(menu_path, checking)
			if checking.endswith(".xml"):
				self.menu_list.append([checking, path])

if __name__ == '__main__':

    #if dbus:
		#try:
		    #bus = dbus.SessionBus()
		#except dbus.DBusException:
		    #bus = None
    #else:
		#bus = None

    #filename = BaseDirectory.load_first_config('compiz/boxmenu/menu.xml')
    #configdir = BaseDirectory.save_config_path('compiz/boxmenu')
    CBEditor()
    gtk.main()
